# -*- coding: utf-8 -*-
"""techtern_EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CGWYXb3HffYAElrK6tQakQb2SLIiqtt5

#IMPORTS AND READING CSV FILE
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

url = "https://raw.githubusercontent.com/SushiApril/Techtern-insight/rebuild-site-with-flask/jobs.csv"
df = pd.read_csv(url)
df.head()

"""# DATA CLEANING"""

# 1. seperate city and state (for geospatial visualizations):
df[['city', 'state']] = df['location'].str.extract(r'(?P<city>.*(?=\s[A-Z]{2}$)) (?P<state>[A-Z]{2}$)')
df.head()

#2. min, max, avg for salary.
  # converting hourly rate to yearly
def extract_min_max(salary):

    if pd.isna(salary) or salary is None:
        return None, None
    clean_salary = salary.replace('$', '').replace(',', '').split(' (')[0].replace('\xa0', ' ')
    try:
      if 'Per Hour' in clean_salary:
          min_val, max_val = [float(val) for val in clean_salary.split(' Per Hour')[0].split(' - ')]
          # convert hourly to yearly (using 40 hours/week and 50 weeks/year)
          min_val, max_val = [val * 40 * 50 for val in (min_val, max_val)]
      elif 'K' in clean_salary:
          min_val, max_val = [float(val.split(' ')[0].replace('K', '')) * 1000 for val in clean_salary.split(' - ')]
    except:
      return None, None
    return min_val, max_val

min_lambda = lambda x: extract_min_max(x)[0] if not pd.isna(x) and extract_min_max(x)[0] is not None else None
max_lambda = lambda x: extract_min_max(x)[1] if not pd.isna(x) and extract_min_max(x)[1] is not None else None

df['min_salary'] = df['salary'].apply(min_lambda)
df['max_salary'] = df['salary'].apply(max_lambda)
df['avg_salary'] = (df['min_salary'] + df['max_salary']) / 2

df.head()

"""#DATA INSIGHTS"""

# statistical discreption of the dataset:
df.describe()

pivot_table = df.pivot_table(index='name-of-company', values='avg_salary', aggfunc='mean')

pivot_table_sorted = pivot_table.sort_values('avg_salary', ascending=False)

print(pivot_table_sorted)

pivot_table_median = df.pivot_table(index='state', values='avg_salary', aggfunc='median')

pivot_table_median_sorted = pivot_table_median.sort_values('avg_salary', ascending=False)

print(pivot_table_median_sorted)

"""#DATA VISUALIZATION"""

ax = df['date'].value_counts().head(10).plot(kind='bar', title='Days since Posted')
ax.set_xlabel('Days')
ax.set_ylabel('Count')

ax = df['avg_salary'].plot(kind='hist', bins= 20, title="Average SWE Interns Pay")
ax.set_xlabel('Pay ($)')

# Group by state and count the number of jobs
state_counts = df['state'].value_counts()

# Plot the results
state_counts.plot(kind='bar', figsize=(15,7))
plt.title('Number of Jobs by State')
plt.xlabel('State')
plt.ylabel('Number of Jobs')
plt.xticks(rotation=45)
plt.show()

# Group by city and count the number of jobs
city_counts = df['city'].value_counts()
top_10_citites = city_counts.head(10)
# Plot the results
top_10_citites.plot(kind='bar')
plt.title('Top 10 Cities by Job Count')
plt.xlabel('City')
plt.ylabel('Number of Jobs')
plt.xticks(rotation=45)
plt.show()

df.boxplot(column = ['avg_salary'])

average_salary_by_state = df.groupby('state')['avg_salary'].mean().reset_index()
average_salary_by_state = average_salary_by_state.sort_values(by='avg_salary', ascending=False)
plt.figure(figsize=(14,7))
plt.bar(average_salary_by_state['state'], average_salary_by_state['avg_salary'])
plt.xlabel('State')
plt.ylabel('Average Salary ($)')
plt.title('Average Salary by State')
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(14,7))

# For each unique state, plot the salary values
for state in df['state'].unique():
    state_data = df[df['state'] == state]
    plt.scatter([state] * len(state_data), state_data['avg_salary'], label=state, alpha=0.5)

plt.xlabel('State')
plt.ylabel('Salary ($)')
plt.title('Scatterplot of Salaries by State')
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(14,7))

top_states = df['state'].value_counts().index[:10]
subset = df[df['state'].isin(top_states)]

sns.kdeplot(data=subset, x='avg_salary', hue='state', fill=True)

plt.title('Density Plot of Salaries by State')
plt.xlabel('Salary ($)')
plt.ylabel('Density')
plt.show()